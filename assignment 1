import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LeakyReLU
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

# Load MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train = x_train.reshape((x_train.shape[0], -1)).astype('float32') / 255
x_test = x_test.reshape((x_test.shape[0], -1)).astype('float32') / 255

# Convert labels to categorical one-hot encoding
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

# Function to build the model
def build_model(activation):
    model = Sequential()
    model.add(Dense(512, input_shape=(784,)))
    if activation == 'LeakyReLU':
        model.add(LeakyReLU(alpha=0.01))
    else:
        model.add(Dense(512, activation=activation))
    model.add(Dense(512, activation=activation))
    model.add(Dense(10, activation='softmax'))
    
    model.compile(optimizer='adam',
                  loss='categorical_crossentropy',
                  metrics=['accuracy'])
    return model

# Training and evaluation function
def train_and_evaluate(activation, epochs=10, batch_size=128):
    model = build_model(activation)
    history = model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size, validation_split=0.2, verbose=1)
    test_loss, test_acc = model.evaluate(x_test, y_test, verbose=0)
    return history, test_loss, test_acc

# Train models with different activation functions
history_relu, loss_relu, acc_relu = train_and_evaluate('relu')
history_leaky_relu, loss_leaky_relu, acc_leaky_relu = train_and_evaluate('LeakyReLU')
history_sigmoid, loss_sigmoid, acc_sigmoid = train_and_evaluate('sigmoid')

# Plotting accuracy
plt.figure(figsize=(14, 6))
plt.subplot(1, 2, 1)
plt.plot(history_relu.history['accuracy'], label='ReLU Train')
plt.plot(history_relu.history['val_accuracy'], label='ReLU Val')
plt.plot(history_leaky_relu.history['accuracy'], label='LeakyReLU Train')
plt.plot(history_leaky_relu.history['val_accuracy'], label='LeakyReLU Val')
plt.plot(history_sigmoid.history['accuracy'], label='Sigmoid Train')
plt.plot(history_sigmoid.history['val_accuracy'], label='Sigmoid Val')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

# Plotting loss
plt.subplot(1, 2, 2)
plt.plot(history_relu.history['loss'], label='ReLU Train')
plt.plot(history_relu.history['val_loss'], label='ReLU Val')
plt.plot(history_leaky_relu.history['loss'], label='LeakyReLU Train')
plt.plot(history_leaky_relu.history['val_loss'], label='LeakyReLU Val')
plt.plot(history_sigmoid.history['loss'], label='Sigmoid Train')
plt.plot(history_sigmoid.history['val_loss'], label='Sigmoid Val')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()

# Print test accuracy
print(f'ReLU Test Accuracy: {acc_relu:.4f}')
print(f'LeakyReLU Test Accuracy: {acc_leaky_relu:.4f}')
print(f'Sigmoid Test Accuracy: {acc_sigmoid:.4f}')
